#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <stdlib.h>
#include <stdio.h> 
#define  N 16
__global__ void MatMul(int *dev_a, int *dev_b, int *dev_c, int width)
{

int col = threadIdx.x;
int row = threadIdx.y;
float cvalue = 0;
for (int e = 0; e < width; e++)
{
cvalue += dev_a[row*width + e] * dev_b[width*e + col];
}
dev_c[row*width + col] = cvalue;
}
int main()
{
int *a, *b, *c, *dev_a, *dev_b, *dev_c;
a = (int*)malloc(sizeof(int)*N*N);
b = (int*)malloc(sizeof(int)*N*N);
c = (int*)malloc(sizeof(int)*N*N);
cudaMalloc((void **)&dev_a, sizeof(int)*N*N);
cudaMalloc((void **)&dev_b, sizeof(int)*N*N);
cudaMalloc((void **)&dev_c, sizeof(int)*N*N);
for (int i = 0; i < N; i++)
for (int j = 0; j < N; j++)
{
a[i*N + j] = 1;
b[i*N + j] = 2;

}
cudaMemcpy(dev_a, a, sizeof(int)*N*N, cudaMemcpyHostToDevice);
cudaMemcpy(dev_b, b, sizeof(int)*N*N, cudaMemcpyHostToDevice);
dim3 blocks(1, 1);
dim3 threads(16, 16);
MatMul << <blocks, threads >> > (dev_a, dev_b, dev_c, N);
cudaMemcpy(c, dev_c, sizeof(int)*N*N, cudaMemcpyDeviceToHost);
for (int i = 0; i < N; i++)
{
for (int j = 0; j < N; j++)
printf(" %d", c[i*N + j]);
printf("\n");
}
system("pause");
cudaFree(dev_a);
cudaFree(dev_b);
cudaFree(dev_c);
free(a);
free(b);
free(c);
return 0;
}
